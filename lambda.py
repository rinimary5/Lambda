# -*- coding: utf-8 -*-
"""Lambda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11qP3kX7odgPIoDEHrjgcK7zvnCvFFBTX
"""

import os
import requests
from dotenv import load_dotenv

load_dotenv('/content/sample_data/.env')  # Adjust path if needed

# Check loaded values
print("ACCESS_KEY_ID:", os.getenv("ACCESS_KEY_ID"))


load_dotenv()

def fetch_data():
    access_key_id = os.getenv("ACCESS_KEY_ID")
    access_key_secret = os.getenv("ACCESS_KEY_SECRET")
    if not access_key_id or not access_key_secret:
        print("Error: API keys not found in environment variables.")
        return None

    url = "https://r1100.kissflow.com/process/2/Ac9bBX8oB33D/admin/Lambda_assignment/item"

    headers = {
        "X-Access-Key-Id": access_key_id,
        "X-Access-Key-Secret": access_key_secret
    }
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data: {e}")
        return None
def update_request(instance_id):
    access_key_id = os.getenv("ACCESS_KEY_ID")
    access_key_secret = os.getenv("ACCESS_KEY_SECRET")
    if not access_key_id or not access_key_secret:
        print("Error: API keys not found in environment variables.")
        return None
    url = f"https://r1100.kissflow.com/process/2/Ac9bBX8oB33D/admin/Lambda_assignment/{instance_id}"
    headers = {
        "X-Access-Key-Id": access_key_id,
        "X-Access-Key-Secret": access_key_secret,
        "Content-Type": "application/json"
    }

    payload = {

        "Auto_Submission_Triggered": True,
        "Proceed_to_onboard": "Approved"
    }




    try:
        response = requests.put(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error updating fields for instance_id {instance_id}: {e}")
        return None
def submit_instance(instance_id, activity_instance_id):
    access_key_id = os.getenv("ACCESS_KEY_ID")
    access_key_secret = os.getenv("ACCESS_KEY_SECRET")
    if not access_key_id or not access_key_secret:
        print("Error: API keys not found in environment variables.")
        return None
    url = f"https://r1100.kissflow.com/process/2/Ac9bBX8oB33D/Lambda_assignment/{instance_id}/{activity_instance_id}/submit"

    headers = {
        "X-Access-Key-Id": access_key_id,
        "X-Access-Key-Secret": access_key_secret,
        "Accept": "application/json"
    }
    try:
        response = requests.post(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error submitting instance {instance_id} for activity {activity_instance_id}: {e}")
        return None
def process_items():
    data = fetch_data()
    if not data or "Data" not in data:
        print("No data found.")
        return
    items = data["Data"]
    items_to_process = [item for item in items if item.get("Ready_to_close", False)]
    if not items_to_process:
        print("No items with 'Ready_to_Close' = Yes found.")
        return
    print(f"Found {len(items_to_process)} items to process.")
    for item in items_to_process:
        instance_id = item["_id"]
        activity_instance_ids = item.get("_activity_instance_id", [])
        if not activity_instance_ids:
            print(f"Missing 'activity_instance_id' for instance_id {instance_id}. Skipping.")
            continue
        activity_instance_id = activity_instance_ids[0]
        print(f"Updating 'Ready_to_Close' for instance_id: {instance_id}")
        update_result = update_request(instance_id)
        if update_result:
            print(f"'Ready_to_Close' updated successfully for instance_id: {instance_id}. Proceeding to submit.")
            print(f"Submitting instance_id: {instance_id} with activity_instance_id: {activity_instance_id}")
            submit_result = submit_instance(instance_id, activity_instance_id)
            if submit_result:
                print(f"Successfully submitted instance {instance_id} for activity {activity_instance_id}.")
            else:
                print(f"Failed to submit instance {instance_id} for activity {activity_instance_id}.")
        else:
            print(f"Failed to update 'Ready_to_Close' for instance_id: {instance_id}. Skipping submission.")
if __name__ == "__main__":
    process_items()

pip install python-dotenv

!pip install python-dotenv

print("Access Key ID:", os.getenv("ACCESS_KEY_ID"))
print("Access Key Secret:", os.getenv("ACCESS_KEY_SECRET"))

!jupyter nbconvert --to script Lambda.ipynb

!ls

!jupyter nbconvert --to script "Lambda.ipynb"